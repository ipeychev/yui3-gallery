{"majorversion": 3, "classmap": {"UndoManager": {"name": "UndoManager", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Configuration object"}], "description": "Create a UndoManager to manage list of undoable actions."}], "namespace": "", "module": "gallery-undo", "events": {"limitChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "limitChange", "description": "Fires when the value for the configuration attribute 'limit' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "cancelingFinished": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object"}], "description": "Signals a canceling actions process has been finished."}, "actionUndone": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>action</dt>\n<dd>An <code>Y.UndoableAction</code> undone</dd>\n<dt>index</dt>\n<dd>The index of the action in the list</dd>\n</dl>"}], "description": "Signals an action has been undone."}, "undoFinished": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object"}], "description": "Signals the end of undo process."}, "actionCanceled": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>action</dt>\n<dd>An <code>Y.UndoableAction</code> canceled</dd>\n<dt>index</dt>\n<dd>The index of the action in the list</dd>\n</dl>"}], "description": "Signals an action has been canceled."}, "beforeCanceling": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object"}], "description": "Signals the beginning of a process in which one or more actions will be canceled."}, "beforeUndo": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object"}], "description": "Signals the beginning of a process in which one or more actions will be undone."}, "actionAdded": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>action</dt>\n<dd>An <code>Y.UndoableAction</code> added to the list</dd>\n</dl>"}], "description": "Signals an <code>Y.UndoableAction</code> has been added to list"}, "actionRedone": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>action</dt>\n<dd>An <code>Y.UndoableAction</code> redone</dd>\n<dt>index</dt>\n<dd>The index of the action in the list</dd>\n</dl>"}], "description": "Signals an action has been redone."}, "beforeRedo": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object"}], "description": "Signals the beginning of a process in which one or more actions will be redone."}, "undoIndexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "undoIndexChange", "description": "Fires when the value for the configuration attribute 'undoIndex' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "redoFinished": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object"}], "description": "Signals the end of redo process."}}, "configs": {"limit": {"default": "0 (unlimited)", "type": "Number", "description": "Holds the maximum number of actions in UndoManager. By default the number of actions is not limited.", "guessedname": "limit", "guessedtype": "property"}, "undoIndex": {"readonly": "", "type": "Number", "description": "The index of command, that will be executed on the next call to redo().\nIf undo() has been not invoked, the value is the size of the current list of actions.\nOtherwise, it is the index of the last action that was undone.", "guessedname": "undoIndex", "guessedtype": "property"}}, "methods": {"processTo": {"params": [{"type": "", "name": "newIndex", "description": " The new value of <code>undoIndex</code>"}], "description": "Calls undo or redo methods of the actions registered while current index is less or greater than the <code>newIndex</code> passed.", "guessedname": "processTo", "guessedtype": "function"}, "_initEvents": {"protected": "", "description": "Publishes UndoManager's events", "guessedname": "_initEvents", "guessedtype": "function"}, "_undoTo": {"protected": "", "params": [{"type": "", "name": "newIndex", "description": " The new value of <code>undoIndex</code>"}], "description": "Undoes all actions from current index to <code>newIndex</code>. In case of asynchronous action, waits until action fires <code>undoFinished</code> event.", "guessedname": "_undoTo", "guessedtype": "function"}, "purgeAll": {"description": "Removes all actions from the list", "guessedname": "purgeAll", "guessedtype": "function"}, "canUndo": {"return": {"type": "Boolean", "description": "true if undo is possible, false otherwise"}, "description": "Checks if undo can be done. The function will return false if there are no actions in the list,\nthe current index is 0 or UndoManager is waiting for another asynchronous action to complete.", "guessedname": "canUndo", "guessedtype": "function"}, "getUndoLabel": {"return": {"type": "String", "description": "The value of label property"}, "description": "If undo is posible, returns the value of <code>label</code> property of the action to be undone.", "guessedname": "getUndoLabel", "guessedtype": "function"}, "_onAsyncRedoFinished": {"protected": "", "params": [{"type": "Y.UndoableAction", "name": "action", "description": " The asynchronous action which redo method has been completed."}, {"type": "Number", "name": "newIndex", "description": " The new value of <code>undoIndex</code>"}], "description": "Handles the completion of redo method of asynchronous action. \nFires <code>actionRedone</code> event. Checks if <code>newIndex<code> is bigger than current index. If true, invokes _redoTo again, or fires <code>redoFinished</code> event otherwise.", "guessedname": "_onAsyncRedoFinished", "guessedtype": "function"}, "_redoTo": {"protected": "", "params": [{"type": "", "name": "newIndex", "description": " The new value of <code>undoIndex</code>"}], "description": "Redoes all actions from current index to <code>newIndex</code>. In case of asynchronous action, waits until action fires <code>redoFinished</code> event.", "guessedname": "_redoTo", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Publishes events and subscribes to after event for limit.", "guessedname": "initializer", "guessedtype": "function"}, "getRedoLabel": {"return": {"type": "String", "description": "The value of label property"}, "description": "If redo is posible, returns the value of <code>label</code> property of the action to be redone.", "guessedname": "getRedoLabel", "guessedtype": "function"}, "undo": {"description": "Undoes the action before current index by calling its <code>undo</code> method.\nIf <code>asyncProcessing</code> property of the action is true, UndoManager waits until action fires <code>undoFinished</code> event.\nDuring this time undoing/redoing and adding new actions will be suspended.", "guessedname": "undo", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Destructor lifecycle implementation for UndoManager class.\nRemoves and cancels the added actions.", "guessedname": "destructor", "guessedtype": "function"}, "_limitActions": {"protected": "", "params": [{"type": "Number", "name": "limit", "description": " The max number of actions in the list"}], "description": "Removes actions from the list if their number exceedes the <code>limit</code>", "guessedname": "_limitActions", "guessedtype": "function"}, "add": {"return": {"type": "Boolean", "description": "True if action was added to the list. The result might be False if UndoManager was processing another (asynchronous) action."}, "params": [{"type": "Y.UndoableAction", "name": "newAction", "description": " The action to be added"}], "description": "Adds an UndoableAction to UndoManager.<br>\nRemoves and cancels all actions from the current action index till the end of the list.\nTries to merge the current action with the <code>newAction</code>, passed as parameter. If <code>currentAction.merge(newAction)</code> returns false, UndoManager places the <code>newAction</code> at the end of the list.", "guessedname": "add", "guessedtype": "function"}, "_onAsyncUndoFinished": {"protected": "", "params": [{"type": "Y.UndoableAction", "name": "action", "description": " The asynchronous action which undo method has been completed."}, {"type": "Number", "name": "newIndex", "description": " The new value of <code>undoIndex</code>"}], "description": "Handles the completion of undo method of asynchronous action.\nFires <code>actionUndone</code> event. Checks if <code>newIndex<code> is less than current index. If true, invokes _undoTo again, or fires <code>undoFinished</code> event otherwise.", "guessedname": "_onAsyncUndoFinished", "guessedtype": "function"}, "purgeTo": {"params": [{"type": "Number", "name": "index", "description": " The index in the list to which actions should be be removed"}], "description": "Removes actions from the end of the list (the most recent actions) to index passed as parameter.", "guessedname": "purgeTo", "guessedtype": "function"}, "canRedo": {"return": {"type": "Boolean", "description": "true if redo is possible, false otherwise"}, "description": "Checks if redo can be done. The function will return false if there are no actions in the list,\ncurrent index is equal to the length of the list or UndoManager is waiting for another asynchronous action to complete.", "guessedname": "canRedo", "guessedtype": "function"}, "_afterLimit": {"protected": "", "params": [{"type": "Event", "name": "params", "description": "  limitChange custom event"}], "description": "Invokes <code>_limitActions</code> in order to keep the number of actions in the list according to the <code>limit</code>.", "guessedname": "_afterLimit", "guessedtype": "function"}, "redo": {"description": "Redoes the action at current index by calling its <code>redo</code> method.\nIf <code>asyncProcessing</code> property of the action is true, UndoManager waits until action fires <code>redoFinished</code> event.\nDuring this time undoing/redoing and adding new actions will be suspended.", "guessedname": "redo", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "gallery-undomanager.js", "shortname": "UndoManager", "properties": {"UndoManager.ATTRS": {"description": "Static property used to define the default attribute configuration of UndoManager.", "protected": "", "static": "", "guessedname": "ATTRS", "guessedtype": "property", "type": "Object"}, "UndoManager.NAME": {"type": "String", "static": "", "description": "The identity of UndoManager.", "guessedname": "NAME", "guessedtype": "property"}, "_actionHandle": {"protected": "", "type": "Object", "description": "The handle of the currently executed asynchronous action", "guessedname": "_actionHandle", "guessedtype": "property"}, "_processing": {"protected": "", "type": "Boolean", "description": "Boolean, indicates if UndoManager is currently processing an action", "guessedname": "_processing", "guessedtype": "property"}, "_undoIndex": {"protected": "", "type": "Number", "description": "If undo() has been not invoked, _undoIndex is the size of the current list of actions.\nOtherwise, it is the index of the last action that was undone.", "guessedname": "_undoIndex", "guessedtype": "property"}, "_actions": {"protected": "", "type": "Array", "description": "Collection of actions.", "guessedname": "_actions", "guessedtype": "property"}}, "description": "Create a UndoManager to manage list of undoable actions."}, "UndoableAction": {"name": "UndoableAction", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Configuration object"}], "description": "Create a UndoableAction"}], "namespace": "", "module": "gallery-undo", "events": {"undoFinished": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object"}], "description": "Signals the end of action undo."}, "beforeUndo": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object"}], "description": "Signals the beginning of action undo."}, "beforeRedo": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object"}], "description": "Signals the beginning of action redo."}, "asyncProcessingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "asyncProcessingChange", "description": "Fires when the value for the configuration attribute 'asyncProcessing' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelChange", "description": "Fires when the value for the configuration attribute 'label' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "redoFinished": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object"}], "description": "Signals the end of action redo."}}, "configs": {"asyncProcessing": {"default": "false", "type": "Boolean", "description": "Boolean, indicates if action must be processed asynchronously.\nIf true, <code>undo</code> method must fire <code>undoFinished</code> event.\nRespectively, <code>redo</code> method must fire <code>redoFinished</code> event", "guessedname": "asyncProcessing", "guessedtype": "property"}, "label": {"default": "\"\"", "type": "String", "description": "The label of action", "guessedname": "label", "guessedtype": "property"}}, "methods": {"_initEvents": {"protected": "", "description": "Publishes UndoableAction's events", "guessedname": "_initEvents", "guessedtype": "function"}, "undo": {"description": "The default implemetation undoes all child actions in reverse order.", "guessedname": "undo", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Destructor lifecycle implementation for UndoableAction class.", "guessedname": "destructor", "guessedtype": "function"}, "merge": {"return": {"type": "Boolean", "description": "false"}, "params": [{"type": "Y.UndoableAction", "name": "newAction", "description": " The action to merge with"}], "description": "Depending on the application, an UndoableAction may merge with another action. If merge was successfull, merge must return true; otherwise returns false.\nThe default implemetation returns false.", "guessedname": "merge", "guessedtype": "function"}, "toString": {"description": "Overrides <code>toString()</code> method.<br>\nThe default implementation returns the value of <code>label</code> property.", "guessedname": "toString", "guessedtype": "function"}, "cancel": {"description": "UndoManager invokes <code>cancel</code> method of action before removing it from the list.<br>\nThe default implemetation does nothing.", "guessedname": "cancel", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Publishes events", "guessedname": "initializer", "guessedtype": "function"}, "redo": {"description": "The default implemetation redoes all child actions.", "guessedname": "redo", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "gallery-undoableaction.js", "shortname": "UndoableAction", "properties": {"UndoableAction.NAME": {"type": "String", "static": "", "description": "The identity of UndoableAction.", "guessedname": "NAME", "guessedtype": "property"}, "_childActions": {"protected": "", "type": "Array", "description": "Container for child actions of this action", "guessedname": "_childActions", "guessedtype": "property"}, "UndoableAction.ATTRS": {"description": "Static property used to define the default attribute configuration of UndoableAction.", "protected": "", "static": "", "guessedname": "ATTRS", "guessedtype": "property", "type": "Object"}}, "description": "Create a UndoableAction"}}, "version": "1.00", "modules": {"gallery-undo": {"description": "Provides UndoableAction class", "submodules": [], "classlist": ["UndoManager", "UndoableAction"], "filelist": ["gallery-undomanager.js", "gallery-undoableaction.js"], "subdata": {}, "name": "gallery-undo"}}, "filemap": {"gallery-undoableaction.js": {"classlist": ["UndoableAction"], "name": "gallery-undoableaction.js", "module": "gallery-undo"}, "gallery-undomanager.js": {"classlist": ["UndoManager"], "name": "gallery-undomanager.js", "module": "gallery-undo"}}}